### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
factor.reduccion <- .5
### La densidad Rayleigh parametrizada por la
dRayleigh <- function(z, mu) {
return(
pi / (2 * mu) * z * exp(- pi / (4 * mu) * z^2)
)
}
### Densidad gama parametrizada por la media y el número de looks
dgammaSAR <- function(x, Looks, mu) {
dgamma(x, shape=Looks, rate=Looks/mu)
}
### Densidad GI0
densGI0 <- function(x, a, g, Looks){
return(Looks^Looks * gamma(Looks-a) * x^(Looks-1) * (g+Looks*x)^(a-Looks) /
(g^a * gamma(-a) * gamma(Looks)))
}
### Gráfico de formación del speckle
N <- 10 # número de espalhadores
sigma2 <- 1
RAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
IAi <- c(0, rnorm(n = N, mean = 0, sd = sqrt(sigma2)))
### Determinación de la caja para dibujar los ejes
rangex <- range(cumsum(RAi))
rangey <- range(cumsum(IAi))
maxaxis <- max(abs(c(rangex, rangey))) * factor.reduccion
### El área de dibujo
#pdf(file="../../Courses/Figures/VectoresSpeckle.pdf", width = 8, height=8)
plot(c(-maxaxis, maxaxis), c(-maxaxis, maxaxis), type = "n", asp = 1,
axes = FALSE,
xlab = "Real Components", ylab = "Imaginary Components")
Arrows(x0 = -maxaxis, y0 = 0, x1 = maxaxis, y1 = 0, arr.type="triangle")
Arrows(y0 = -maxaxis, x0 = 0, y1 = maxaxis, x1 = 0, arr.type="triangle")
### Los vectores sumándose
Arrows(x0 = RAi[1:(N)], y0 = IAi[1:(N)], x1 = RAi[2:(N+1)], y1 = IAi[2:(N+1)], lwd=.3)
### El vector final
Arrows(x0 = 0, y0 = 0, x1 = RAi[N+1], y1 = IAi[N+1], lwd = 3, col = 2)
#dev.off()
### Fin Gráfico de formación del speckle
q()
?dgamma
q()
colores <- wes_palette("Moonrise3", n=4)
par(mfrow = c(1, 2))
curve(dexp(x, rate=2.5), from=.01, to=4, n=500, type="l", lwd=7, bty = "n", col=colores[2],
xlab = "Intensity", ylab = "Exponential Densities")
curve(dexp(x, rate = 1), lwd = 7, col = colores[1], add = TRUE)
curve(dexp(x, rate = .5), lwd = 7, col = colores[3], add = TRUE)
legend("topright", legend=c(
expression(paste(mu,"=0.4")),
expression(paste(mu,"=1.0")),
expression(paste(mu,"=2.0"))
),
lwd=rep(5, 3),
col=colores[c(2,1,3)]
)
curve(dexp(x, rate=2.5), from=.01, to=4, n=500, type="l", lwd=7, bty = "n", col=colores[2],
xlab = "Intensity", ylab = "Exponential Densities", log = "y")
curve(dexp(x, rate = 1), lwd = 7, col = colores[1], add = TRUE)
curve(dexp(x, rate = .5), lwd = 7, col = colores[3], add = TRUE)
legend("topright", legend=c(
expression(paste(mu,"=0.4")),
expression(paste(mu,"=1.0")),
expression(paste(mu,"=2.0"))),
lwd=rep(5, 3),
col=colores[c(2,1,3)]
)
dev.off()
par(mfrow=c(1,1))
require(shape)
require(wesanderson)
par(mfrow = c(1, 2))
curve(dexp(x, rate=2.5), from=.01, to=4, n=500, type="l", lwd=7, bty = "n", col=colores[2],
xlab = "Intensity", ylab = "Exponential Densities")
curve(dexp(x, rate = 1), lwd = 7, col = colores[1], add = TRUE)
curve(dexp(x, rate = .5), lwd = 7, col = colores[3], add = TRUE)
legend("topright", legend=c(
expression(paste(mu,"=0.4")),
expression(paste(mu,"=1.0")),
expression(paste(mu,"=2.0"))
),
lwd=rep(5, 3),
col=colores[c(2,1,3)]
)
curve(dexp(x, rate=2.5), from=.01, to=4, n=500, type="l", lwd=7, bty = "n", col=colores[2],
xlab = "Intensity", ylab = "Exponential Densities", log = "y")
curve(dexp(x, rate = 1), lwd = 7, col = colores[1], add = TRUE)
curve(dexp(x, rate = .5), lwd = 7, col = colores[3], add = TRUE)
legend("topright", legend=c(
expression(paste(mu,"=0.4")),
expression(paste(mu,"=1.0")),
expression(paste(mu,"=2.0"))),
lwd=rep(5, 3),
col=colores[c(2,1,3)]
)
dev.off()
par(mfrow=c(1,1))
if(!require(shape))(install.packages("shape"))
if(!require(wesanderson))(install.packages("wesanderson"))
if(!require(rgl))install.packages("rgl")
source("./imagematrix.R")
if(!require(tiff)){install.packages("tiff"); require(tiff)}
barras <- readTIFF("strips.tif") # Leemos la imagen de barras
range(barras) # Verificamos el rango de sus valores
plot(imagematrix(barras)) # La visualizamos
barras <- barras / max(barras) * (.9 - .1) + .1
barras_1Look <- barras * matrix(data=rexp(n = 256*256, rate = 1), ncol=256, nrow = 256)
plot(imagematrix(normalize(barras_1Look)))
hist(barras_1Look)
barras_1Lookeq <- equalize(barras_1Look)
hist(barras_1Lookeq)
Filtro_Media <- function(imagen, Lado) {
salida <- imagen
dimensiones <- dim(imagen)
margen <- (Lado+1)/2
lados <- (Lado-1)/2
for(i in margen:(dimensiones[1]-margen))
for(j in margen:(dimensiones[2]-margen)) {
salida[i,j] <- mean(imagen[(i-lados):(i+lados), (j-lados):(j+lados)])
}
return(salida)
}
Filtro_Mediana <- function(imagen, Lado) {
salida <- imagen
dimensiones <- dim(imagen)
margen <- (Lado+1)/2
lados <- (Lado-1)/2
for(i in margen:(dimensiones[1]-margen))
for(j in margen:(dimensiones[2]-margen)) {
salida[i,j] <- median(imagen[(i-lados):(i+lados), (j-lados):(j+lados)])
}
return(salida)
}
Filtrado_Media5x5 <- Filtro_Media(barras_1Look, 5)
plot(normalize(Filtrado_Media5x5))
plot(normalize(imagematrix(Filtrado_Media5x5)))
plot(imagematrix(normalize(Filtrado_Media5x5)))
plot(normalize(Filtrado_Media5x5))
plot(imagematrix(normalize(Filtrado_Media5x5)))
plot(imagematrix(equalize(Filtrado_Media5x5)))
q()
q()
library(readr)
X2013_2014_2015_2016_comparacao_geral_1 <- read_csv("~/Desktop/2013-2014-2015-2016-comparacao-geral-1.csv")
View(X2013_2014_2015_2016_comparacao_geral_1)
View(X2013_2014_2015_2016_comparacao_geral_1)
rm()
rm(X2013_2014_2015_2016_comparacao_geral_1)
Geral <- read.csv(file="Desktop/2013-2014-2015-2016-comparacao-geral.csv", header=TRUE, sep = ";")
q()
q()
?gamma
q()
P <-
matrix(
c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1),
nrow = 3
)
P <-
matrix(
c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1),
nrow = 3, ncol = 3
)
P
c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1)
P<-  c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1)
dim(P)
length(P)
P <-
matrix(
c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1),
nrow = 3, ncol = 3, byrow=TRUE
)
(P <-
matrix(
c(0, 0, .5, 0, .5,
0, 0, 1, 0, 0,
.25, .25, 0, .25, .25,
0, 0, .5, 0, .5,
0, 0, 0, 0, 1),
nrow = 5, ncol = 5, byrow=TRUE
)
)
eigen(P)
q()
install.packages("quantmod")
install.packages(c("curl", "magick"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
q()
H <- seq(.01, 1, step=.01)
H <- seq(.01, 1, by=.01)
plot(H, sqrt(H^2*(Hstar - H/2))-H+1)
HStar <- 1
plot(H, sqrt(H^2*(Hstar - H/2))-H+1)
rm(HStar)
Hstar <- 1
plot(H, sqrt(H^2*(Hstar - H/2))-H+1)
plot(H, sqrt(H^2*(Hstar - H/2))-H+1, type="l")
Hstar <- H
lines(H, sqrt(H^2*(Hstar - H/2))-H+1, col="red")
d <- function(H, Hstar) sqrt(1.5 * H^2 - H * (Hstar-1) + 1)
H <- seq(0, 1, by=.01)
Hstar <- H
plot(H , d(H, Hstar), type="l", col="red")
lines(H, d(H,1))
q()
require(rgl)
set.seed(1234567890, kind = "Mersenne-Twister")
MMersenneTwister <- matrix(data=runif(50000*3), nrow = 50000, ncol = 3)
plot3d(MMersenneTwister)
require(scatterplot3d)
scatterplot3d(MMersenneTwister)
scatterplot3d(MMersenneTwister, pch='.')
seed <- as.double(1)
RANDU <- function() {
seed <<- ((2^16 + 3) * seed) %% (2^31)
seed/(2^31)
}
Mrandu <- matrix(nrow = 50000, ncol = 3)
for(i in 1:50000) {
Mrandu[i,] <- c(RANDU(), RANDU(), RANDU())
}
scatterplot3d(Mrandu, pch='.')
scatterplot3d(MMersenneTwister, pch='.')
setwd("~/Documents/Alunos/Marcelo Queiroz/Code")
png(filename = "../Plots/MT3D.png")
scatterplot3d(Mrandu, pch='.')
png(filename = "../Plots/MT3D.png")
scatterplot3d(Mrandu, pch='.')
png(filename = "../Plots/Randu3D.png")
scatterplot3d(Mrandu, pch='.', angle = 30)
dev.off()
scatterplot3d(Mrandu, pch='.', angle = 30)
scatterplot3d(Mrandu, pch='.', angle = 90)
scatterplot3d(MMersenneTwister, pch='.')
png(filename = "../Plots/MT3D.png")
dev.off()
library(plot3D)
example("persp3D")
plot3d(MMersenneTwister)
snapshot3d("../Plots/MT3D.png")
Mrandu
plot3d(Mrandu)
snapshot3d("../Plots/Randu3D.png")
snapshot3d("../Plots/Randu3Dsubspace.png")
plot3d(MMersenneTwister)
snapshot3d("../Plots/MT3Dsubspace.png")
load("/Users/acfrery/imagens/DadosPolarimetricos/DLR Polarimetric/ESAR.Rdata")
q()
