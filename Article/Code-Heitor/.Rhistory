Jnam <- row.names(USJudgeRatings)
Snam <- abbreviate(substring(Jnam, 1, regexpr("[,.]",Jnam) - 1), 7)
stars(USJudge, labels = Jnam, scale = FALSE,
key.loc = c(13, 1.5), main = "Judge not ...", len = 0.8)
stars(USJudge, labels = Snam, scale = FALSE,
key.loc = c(13, 1.5), radius = FALSE)
loc <- stars(USJudge, labels = NULL, scale = FALSE,
radius = FALSE, frame.plot = TRUE,
key.loc = c(13, 1.5), main = "Judge not ...", len = 1.2)
text(loc, Snam, col = "blue", cex = 0.8, xpd = TRUE)
'
'
## 'Segments':
stars(USJudge, draw.segments = TRUE, scale = FALSE, key.loc = c(13,1.5))
#
stars(USJudgeRatings, locations = c(0, 0), scale = FALSE, radius  =  FALSE,
col.stars = 1:10, key.loc = c(0, 0), main = "US Judges rated")
stars(USJudgeRatings, locations = c(0, 0), scale = FALSE, radius  =  FALSE,
col.lines = 1:10, key.loc = c(0, 0), main = "US Judges rated")
stars(USJudgeRatings[1:10,], locations = 0:1, scale = FALSE,
draw.segments = TRUE, col.segments = 0, col.stars = 1:10, key.loc =  0:1,
main = "US Judges 1-10 ")
require(ggthemes)
theme_fivethirtyeight()
data <- read.table("http://www.stat.ucla. edu/data/moore/TAB1 -2.DAT", header= FALSE , sep="")
data <- read.table("http://www.stat.ucla.edu/data/moore/TAB1-2.DAT", header= FALSE , sep="")
data(tobacco)
require(dplyr)
data(tobacco)
require(data.table)
q()
install.packages("CGPfunctions")
require(CGPfunctions)
newggslopegraph(newcancer, Year, Survival, Type)
q()
dhyper(1,1,1,1,)
install.packages("hypergeo")
require(hypergeo)
DensMultilookPhase <- function(radian, rho, beta, Looks) {
beta <- Mod(rho) * cos(radian - Arg(rho))
return(
(gamma(Looks+.5) * (1-Mod(rho)^2)^Looks * beta) /
(2 * sqrt(pi) * gamma(Looks) * 1 - beta^2)^(Looks+.5) +
(1-Mod(rho)^2)^Looks / (2*pi) *
hypergeo_press(Looks, 1, .5, beta^2)
)
}
rad < - seq(-pi, pi, length.out = 500
)
rad <- seq(-pi, pi, length.out = 500)
require(hypergeo)
DensMultilookPhase <- function(radian, rho, Looks) {
beta <- Mod(rho) * cos(radian - Arg(rho))
return(
(gamma(Looks+.5) * (1-Mod(rho)^2)^Looks * beta) /
(2 * sqrt(pi) * gamma(Looks) * 1 - beta^2)^(Looks+.5) +
(1-Mod(rho)^2)^Looks / (2*pi) *
hypergeo_press(Looks, 1, .5, beta^2)
)
}
plot(rad, DensMultilookPhase(rad, .7+0i, 1))
require(hypergeo)
DensMultilookPhase <- function(radian, rho, Looks) {
beta <- Mod(rho) * cos(radian - Arg(rho))
return(
(gamma(Looks+.5) * (1-Mod(rho)^2)^Looks * beta) /
(2 * sqrt(pi) * gamma(Looks) * 1 - beta^2)^(Looks+.5) +
(1-Mod(rho)^2)^Looks / (2*pi) *
hypergeo(Looks, 1, .5, beta^2)
)
}
require(hypergeo)
DensMultilookPhase <- function(radian, rho, Looks) {
beta <- Mod(rho) * cos(radian - Arg(rho))
return(
(gamma(Looks+.5) * (1-Mod(rho)^2)^Looks * beta) /
(2 * sqrt(pi) * gamma(Looks) * 1 - beta^2)^(Looks+.5) +
(1-Mod(rho)^2)^Looks / (2*pi) *
hypergeo(Looks, 1, .5, beta^2)
)
}
plot(rad, DensMultilookPhase(rad, .7+0i, 1))
plot(rad, DensMultilookPhase(rad, .7+0i, 1), type="l")
plot(rad, DensMultilookPhase(rad, .7+0i, 8), type="l")
q()
install.packages(c("tidyverse", "funModeling", "Hmisc"))
library(funModeling)
library(tidyverse)
library(Hmisc)
basic_eda <- function(data)
{
glimpse(data)
df_status(data)
freq(data)
profiling_num(data)
plot_num(data)
describe(data)
}
data=heart_disease %>% select(age, max_heart_rate, thal, has_heart_disease)
glimpse(data)
df_status(data)
freq(data)
plot_num(data)
q()
curve(-x * log(x), from=0, to=5)
curve(-x * log(x), from=0, to=5, log="y")
curve(-x * log(x), from=0, to=5)
require(ggplot2)
require(ggthemes)
ggplot(aes(x=data.frame(x=seq(0,5,length.out = 500)))) +geom_s
q()
install.packages(c("bookdown", "bookdownplus"))
q()
install.packages("blogdown")
install.packages("reticulate")
install.packages("rticles")
install.packages("flexdashboard")
install.packages(c("learnr", "learnrbook"))
install.packages("revealjs")
install.packages("pkgdown")
install.packages("xaringan")
install.packages(c("tufte", "tufterhandout"))
webshot::install_phantomjs()
always_allow_html: yes
q()
install.packages(c("callr", "car", "digest", "elliptic", "fansi", "fs", "ggthemes", "ipred", "kernlab", "lava", "lme4", "pkgconfig", "pls", "processx", "rlang", "sandwich", "scales", "tinytex"))
q()
results <- read.csv("~/Documents/Alunos/Marcelo Queiroz/Article/Data/results.csv")
values <- data.frame(TN=as.factor(results$TN),
K=as.factor(results$K),
D=as.factor(results$D),
H=results$H,
C=results$C,
JS=results$JS)
rm(results)
levels(values$TN)
levels(values$K)
levels(values$D)
source('~/Documents/Alunos/Marcelo Queiroz/Code/HCcurves.R', echo=TRUE)
q()
setwd("~/Documents/Alunos/Time_series_analysis_R/Code/R/HCPlane")
source('~/Documents/Alunos/Time_series_analysis_R/Code/R/HCPlane/hcplane.R', echo=TRUE)
pHC <- HCPlane(series, dimension, delay, type)
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(p11, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
p11
pHC
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
#Função geradora do Plano entropia complexidade
HCPlane <- function(series, dimension, delay, type){
Complexity <- Entropy <- rep(0,dim(series)[2])
distributions <- matrix(nrow = factorial(dimension), ncol = dim(series)[2])
for(i in c(1:dim(series)[2])){
distributions[,i] = distribution(series[,i], dimension, delay)
Entropy[i] = shannonNormalized(distributions[,i])
Complexity[i] = Ccomplexity(distributions[,i])
}
#Séries f^-k -> cor azul
#Mapas logísticos -> cor verde
#log(x + .1) -> cor laranja
#Série periódica -> cor vinho
Shapes <- c(8,15,16,17)
Colors <- c('#003366','#366501', '#ff9900', '#800000')
Entropy.Complexity <- data.frame(Entropy, Complexity, Shapes[type], Colors[type])
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(x=c2x, y=c2y, geom="line", xlab=expression(H), ylab=expression(C)) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x, c1y), size=2, alpha=.5) +
geom_point(aes(x = Entropy.Complexity$Entropy,y = Entropy.Complexity$Complexity),
shape = Entropy.Complexity$Shape, color = Entropy.Complexity$Colors, size = 2)
return(p)
}
pHC <- HCPlane(series, dimension, delay, type)
pHC
#Função geradora do Plano entropia complexidade
HCPlane <- function(series, dimension, delay, type){
Complexity <- Entropy <- rep(0,dim(series)[2])
distributions <- matrix(nrow = factorial(dimension), ncol = dim(series)[2])
for(i in c(1:dim(series)[2])){
distributions[,i] = distribution(series[,i], dimension, delay)
Entropy[i] = shannonNormalized(distributions[,i])
Complexity[i] = Ccomplexity(distributions[,i])
}
#Séries f^-k -> cor azul
#Mapas logísticos -> cor verde
#log(x + .1) -> cor laranja
#Série periódica -> cor vinho
Shapes <- c(8,15,16,17)
Colors <- c('#003366','#366501', '#ff9900', '#800000')
Entropy.Complexity <- data.frame(Entropy, Complexity, Shapes[type], Colors[type])
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(x=c2x, y=c2y, geom="line", xlab=expression(H), ylab=expression(C), size=2, alpha=.5) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c1x, c1y), size=2, alpha=.5) +
geom_point(aes(x = Entropy.Complexity$Entropy, y = Entropy.Complexity$Complexity),
shape = Entropy.Complexity$Shape, color = Entropy.Complexity$Colors,
size = 2)
return(p)
}
pHC <- HCPlane(series, dimension, delay, type)
pHC
source('~/Documents/Alunos/Time_series_analysis_R/Code/R/HCPlane/hcplane.R', echo=TRUE)
p0 = qplot(x=subx, y=series_fk[subx,1], geom="line", xlab="n", ylab="") +
ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
p05 = qplot(x=subx, y=series_fk[subx,2], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1/2})) + theme(plot.title = element_text(hjust=0.5))
p1 = qplot(x=subx, y=series_fk[subx,3], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1})) + theme(plot.title = element_text(hjust=0.5))
p15 = qplot(x=subx, y=series_fk[subx,4], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3/2})) + theme(plot.title = element_text(hjust=0.5))
p2 = qplot(x=subx, y=series_fk[subx,5], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-2})) + theme(plot.title = element_text(hjust=0.5))
p25 = qplot(x=subx, y=series_fk[subx,6], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-5/2})) + theme(plot.title = element_text(hjust=0.5))
p3 = qplot(x=subx, y=series_fk[subx,7], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3})) + theme(plot.title = element_text(hjust=0.5))
plogistic36 = qplot(x=subx1, y=series_map[subx1,1], geom="line", xlab="n", ylab="") +
ggtitle("Logistic Map r = 3.6") + theme(plot.title = element_text(hjust=0.5))
plogistic4 = qplot(x=subx1, y=series_map[subx1,2], geom="line" ,xlab="n", ylab="") +
ggtitle("Logistic Map r = 4") + theme(plot.title = element_text(hjust=0.5))
plog = qplot(x=c(1:n), y=series_monotonic, geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos = qplot(x=c(1:n), y=series_periodic, geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
pHC <- HCPlane(series, dimension, delay, type)
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
1:20*6
1:20*6
1:100*100
length(1:100*100)
subx2 <- 1:100*100
plog = qplot(x=subx2, y=series_monotonic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
plog
psincos = qplot(x=subx2, y=series_periodic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos
p0 <- qplot(x=subx, y=series_fk[subx,1], geom="line", xlab="n", ylab="") +
ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
p05 <- qplot(x=subx, y=series_fk[subx,2], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1/2})) + theme(plot.title = element_text(hjust=0.5))
p1 <- qplot(x=subx, y=series_fk[subx,3], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1})) + theme(plot.title = element_text(hjust=0.5))
p15 <- qplot(x=subx, y=series_fk[subx,4], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3/2})) + theme(plot.title = element_text(hjust=0.5))
p2 <- qplot(x=subx, y=series_fk[subx,5], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-2})) + theme(plot.title = element_text(hjust=0.5))
p25 <- qplot(x=subx, y=series_fk[subx,6], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-5/2})) + theme(plot.title = element_text(hjust=0.5))
p3 <- qplot(x=subx, y=series_fk[subx,7], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3})) + theme(plot.title = element_text(hjust=0.5))
plogistic36 <- qplot(x=subx1, y=series_map[subx1,1], geom="line", xlab="n", ylab="") +
ggtitle("Logistic Map r = 3.6") + theme(plot.title = element_text(hjust=0.5))
plogistic4 <- qplot(x=subx1, y=series_map[subx1,2], geom="line" ,xlab="n", ylab="") +
ggtitle("Logistic Map r = 4") + theme(plot.title = element_text(hjust=0.5))
plog <- qplot(x=subx2, y=series_monotonic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos <- qplot(x=subx2, y=series_periodic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
plog <- qplot(x=x[subx2], y=series_monotonic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
plog <- qplot(x=x[subx2], y=series_monotonic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos <- qplot(x=x[subx2], y=series_periodic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
plog
psincos
p0 <- qplot(x=subx, y=series_fk[subx,1], geom="line", xlab="n", ylab="") +
ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
p05 <- qplot(x=subx, y=series_fk[subx,2], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1/2})) + theme(plot.title = element_text(hjust=0.5))
p1 <- qplot(x=subx, y=series_fk[subx,3], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1})) + theme(plot.title = element_text(hjust=0.5))
p15 <- qplot(x=subx, y=series_fk[subx,4], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3/2})) + theme(plot.title = element_text(hjust=0.5))
p2 <- qplot(x=subx, y=series_fk[subx,5], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-2})) + theme(plot.title = element_text(hjust=0.5))
p25 <- qplot(x=subx, y=series_fk[subx,6], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-5/2})) + theme(plot.title = element_text(hjust=0.5))
p3 <- qplot(x=subx, y=series_fk[subx,7], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3})) + theme(plot.title = element_text(hjust=0.5))
plogistic36 <- qplot(x=subx1, y=series_map[subx1,1], geom="line", xlab="n", ylab="") +
ggtitle("Logistic Map r = 3.6") + theme(plot.title = element_text(hjust=0.5))
plogistic4 <- qplot(x=subx1, y=series_map[subx1,2], geom="line" ,xlab="n", ylab="") +
ggtitle("Logistic Map r = 4") + theme(plot.title = element_text(hjust=0.5))
plog <- qplot(x=x[subx2], y=series_monotonic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos <- qplot(x=x[subx2], y=series_periodic[subx2], geom="line", xlab="n", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
p0 <- qplot(x=subx, y=series_fk[subx,1], geom="line", xlab="n", ylab="") +
ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
p05 <- qplot(x=subx, y=series_fk[subx,2], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1/2})) + theme(plot.title = element_text(hjust=0.5))
p1 <- qplot(x=subx, y=series_fk[subx,3], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1})) + theme(plot.title = element_text(hjust=0.5))
p15 <- qplot(x=subx, y=series_fk[subx,4], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3/2})) + theme(plot.title = element_text(hjust=0.5))
p2 <- qplot(x=subx, y=series_fk[subx,5], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-2})) + theme(plot.title = element_text(hjust=0.5))
p25 <- qplot(x=subx, y=series_fk[subx,6], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-5/2})) + theme(plot.title = element_text(hjust=0.5))
p3 <- qplot(x=subx, y=series_fk[subx,7], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3})) + theme(plot.title = element_text(hjust=0.5))
plogistic36 <- qplot(x=subx1, y=series_map[subx1,1], geom="line", xlab="n", ylab="") +
ggtitle("Logistic Map r = 3.6") + theme(plot.title = element_text(hjust=0.5))
plogistic4 <- qplot(x=subx1, y=series_map[subx1,2], geom="line" ,xlab="n", ylab="") +
ggtitle("Logistic Map r = 4") + theme(plot.title = element_text(hjust=0.5))
plog <- qplot(x=x[subx2], y=series_monotonic[subx2], geom="line", xlab="x", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos <- qplot(x=x[subx2], y=series_periodic[subx2], geom="line", xlab="x", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
library(ggplot2)
library(ggplot2)
setwd('Marcelo/paper/')
setwd("~/Documents/Alunos/Marcelo Queiroz/Article/Code-Heitor")
setwd('Marcelo/paper/')
elmacho=read.csv('../Data/results.csv',header=T)
elmacho=read.csv('../Data/results.csv', header=T)
elmacho$X=NULL
read_cotas = function(D=3){
cont_name = paste('limits/continua-N',factorial(D),'.q1', sep='')
trozos_name = paste('limits/trozos-N',factorial(D),'.q1', sep='')
continua = read.table(cont_name, skip=7)
trozos = read.table(trozos_name, skip=7)
cotas = list(continua,trozos)
return(cotas)
}
plot_confidence = function(DD,TNN){
#D=3, TN=1000, K=0
out1 = subset(elmacho,D==DD&TN==TNN)
cot = read_cotas(DD)
xmax=max(out1$H)
ymax=max(out1$C)
xmin=min(out1$H)
ymin=min(out1$C)
ymin=0
ggplot() +
geom_point(aes(H,C,colour = K),data=out1, alpha=.3) +
scale_colour_gradient(low = "yellow", high = "black") +
geom_line(aes(V1,V2),data=cot[[1]])+
geom_line(aes(V1,V2),data=cot[[2]])+
scale_x_continuous(limits=c(xmin,xmax)) +
scale_y_continuous(limits=c(ymin,ymax))+
theme_light()
}
plot_confidence(3,1e3)
plot_confidence(3,5e5)
plot_confidence(6,1e3)
plot_confidence(6,5e5)
p0 <- qplot(x=subx, y=series_fk[subx,1], geom="line", xlab="n", ylab="") +
ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
p05 <- qplot(x=subx, y=series_fk[subx,2], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1/2})) + theme(plot.title = element_text(hjust=0.5))
p1 <- qplot(x=subx, y=series_fk[subx,3], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-1})) + theme(plot.title = element_text(hjust=0.5))
p15 <- qplot(x=subx, y=series_fk[subx,4], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3/2})) + theme(plot.title = element_text(hjust=0.5))
p2 <- qplot(x=subx, y=series_fk[subx,5], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-2})) + theme(plot.title = element_text(hjust=0.5))
p25 <- qplot(x=subx, y=series_fk[subx,6], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-5/2})) + theme(plot.title = element_text(hjust=0.5))
p3 <- qplot(x=subx, y=series_fk[subx,7], geom="line", xlab="n", ylab="") +
ggtitle(expression(f^{-3})) + theme(plot.title = element_text(hjust=0.5))
plogistic36 <- qplot(x=subx1, y=series_map[subx1,1], geom="line", xlab="n", ylab="") +
ggtitle("Logistic Map r = 3.6") + theme(plot.title = element_text(hjust=0.5))
plogistic4 <- qplot(x=subx1, y=series_map[subx1,2], geom="line" ,xlab="n", ylab="") +
ggtitle("Logistic Map r = 4") + theme(plot.title = element_text(hjust=0.5))
plog <- qplot(x=x[subx2], y=series_monotonic[subx2], geom="line", xlab="x", ylab="") +
ggtitle(expression(paste("log(", x + .1, ")"))) +
theme(plot.title = element_text(hjust=0.5))
psincos <- qplot(x=x[subx2], y=series_periodic[subx2], geom="line", xlab="x", ylab="") +
ggtitle(expression(paste("sin(", 2 * x, ")", "cos(", 2 * x, ")"))) +
theme(plot.title = element_text(hjust=0.5))
#Plotando todos os gráficos gerados em um grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 4)))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(pHC, vp = vplayout(2:4, 1:3))
print(plogistic36, vp = vplayout(1, 1))
print(plogistic4, vp = vplayout(1, 2))
print(p3, vp = vplayout(1, 3))
print(p25, vp = vplayout(1, 4))
print(p2, vp = vplayout(2, 4))
print(p15, vp = vplayout(3, 4))
print(p1, vp = vplayout(4, 4))
print(plog, vp = vplayout(5, 1))
print(psincos, vp = vplayout(5, 2))
print(p0, vp = vplayout(5, 3))
print(p05, vp = vplayout(5, 4))
q()
