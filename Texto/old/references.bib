@article{Almiron2009,
abstract = {This work presents a comparison of results about the accuracy of statistical routines from four statistical software packages that are freely used: Octave, academic Ox, Python,and R. Having extensive functional libraries for statistical computingwith applications in image processing, these software packages are useful for data analysis and visualization. TheNational Institute of Standards and Technology datasets andMcCulloughs methodology are used for assessing these packages. As to the statistical analysis herein performed, R yielded the best results and had themost comprehensive library.},
author = {Almiron, Marcelo G. and Almeida, Eliana S. and Miranda, Marcio N.},
doi = {10.1214/08-BJPS017},
file = {:media/marcelo/Data/LDrive/Shared/Marcelo/RNGs/papers/ThereliabilityStatisticalFunctionsinFourSoftwarePackagesFreelyUsedinNumericalComputation.pdf:pdf},
issn = {0103-0752},
journal = {Brazilian Journal of Probability and Statistics},
keywords = {Statistical software, numerical computation, software accuracy,},
number = {2},
pages = {107--119},
title = {{The reliability of statistical functions in four software packages freely used in numerical computation}},
volume = {23},
year = {2009}
}


@article{Ferrenberg:92,
author = {Alan Ferrenberg and D. P. Landau and Y. J. Wong},
title = {{Monte Carlo simulations: Hidden errors from "good" random number generators}},
journal = {Physical Review Letters},
volume = {69},
year = {1992},
pages = {3382--3384},
issue = {23},
doi = {10.1103/PhysRevLett.69.3382},
masid = {1249566}
}

@article{Karl:2014,
author = {Karl, Andrew T. and Eubank, Randy and Milovanovic, Jelena and Reiser, Mark and Young, Dennis},
doi = {10.1007/s00180-014-0492-3},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/UsingRngStreamsforParallelRandomNumberGenerationinCppandR.pdf:pdf},
issn = {0943-4062},
journal = {Computational Statistics},
keywords = {mpi,multicore,openmp,rstream},
mendeley-groups = {SensorNET-WS},
month = {04},
number = {5},
pages = {1301--1320},
title = {{Using RngStreams for parallel random number generation in C++ and R}},
url = {http://link.springer.com/10.1007/s00180-014-0492-3},
volume = {29},
year = {2014}
}
@article{Wikramaratna,
author = {Wikramaratna, By Roy},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/PRNG-for\_Parallel\_MonteCarlo-A\_Splitting\_Approach.pdf:pdf},
mendeley-groups = {SensorNET-WS},
number = {9},
pages = {1--5},
title = {{Pseudo-random Number Generation for Parallel Monte Carlo ? A Splitting Approach}},
volume = {33}
}
@article{Sibley:88,
author = {Sibley, Edgar H and Park, Stephen K and Miller, Keith W},
file = {:home/marcelo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sibley, Park, Miller - 1988 - RANDOM NUMBER GEUERATORS GOOD ONES ARE HARD TO FIN.pdf:pdf},
journal = {Communications of the ACM},
mendeley-groups = {SensorNET-WS},
number = {10},
pages = {1192 -- 1201},
title = {{RANDOM NUMBER GENERATORS : GOOD ONES ARE HARD TO FIND}},
volume = {31},
year = {1988}
}
@inproceedings{Mason2008,
abstract = {Simulations often depend heavily on random numbers, yet the impact of random number generators is recognized sel- dom. The generation of random numbers for simulations is not trivial, as the quality of each algorithm depends on the simulation scenario. Therefore, simulation environments for large-scale experimentation with safety-critical mod- els require a reliable mechanism to cope with this aspect. We show how to address this problem by realizing a ran- dom number generation architecture for a general-purpose simulation system. It provides various random number gen- erators (RNGs), probability distributions, and RNG tests. It is open to future additions, which allows the assessment of new generators in a simulation context and the re-validation of past simulation studies. We present a short example that illustrates why the features of such an architecture are essential for getting valid results. 1},
author = {Mason, S J and Hill, R R and M\"{o}nch, L and Rose, O and Jefferson, T and Fowler, J W and Ewald, Roland and Uhrmacher, Adelinde M},
booktitle = {Proceedings of the 2008 Winter Simulation Conference},
doi = {http://dx.doi.org/10.1109/WSC.2008.4736147},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/A-PLUG-IN?BASED-ARCHITECTURE-FOR-RANDOM-NUMBER-GENERATION-IN-SIMULATION-SYSTEMS.pdf:pdf},
isbn = {9781424427086},
mendeley-groups = {SensorNET-WS},
pages = {836--844},
title = {{A-PLUG-IN?BASED-ARCHITECTURE-FOR-RANDOM-NUMBER-GENERATION-IN-SIMULATION-SYSTEMS}},
url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=4736147},
year = {2008}
}
@article{Lee2014,
author = {Lee, Gyungho and Pyo, Changwoo},
doi = {10.1049/el.2013.4047},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/GPUs as high-performance random sources.pdf:pdf},
issn = {0013-5194},
journal = {Electronics Letters},
mendeley-groups = {SensorNET-WS},
month = apr,
number = {8},
pages = {602--604},
title = {{GPUs as high-performance random sources}},
url = {http://digital-library.theiet.org/content/journals/10.1049/el.2013.4047},
volume = {50},
year = {2014}
}
@article{Ecuyer:14,
author = {L'Ecuyer, Pierre L and Oreshkin, Boris and Simard, Richard},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/Random Numbers for Parallel Computers.pdf:pdf},
keywords = {gpgpu,gpu,multiple,parallel computing,random number generators,random number streams,simulation,streams},
mendeley-groups = {SensorNET-WS},
title = {{Random Numbers for Parallel Computers : Requirements and Methods}}
}
@article{Dammertz2010,
author = {Dammertz, Holger},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/PRNGs-for-Massively-Parallel-Apps.pdf:pdf},
mendeley-groups = {SensorNET-WS},
title = {{Overview Applications for Pseudo-Random Numbers Generating Pseudo-Random Numbers}},
year = {2010}
}
@article{Barash2014,
author = {Barash, L.Yu. and Shchur, L.N.},
doi = {10.1016/j.cpc.2014.01.007},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/PRAND-GPU accelerated parallel random number generation library.pdf:pdf},
issn = {00104655},
journal = {Computer Physics Communications},
mendeley-groups = {SensorNET-WS},
month = apr,
number = {4},
pages = {1343--1353},
publisher = {Elsevier B.V.},
title = {{PRAND: GPU accelerated parallel random number generation library: Using most reliable algorithms and applying parallelism of modern GPUs and CPUs}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0010465514000204},
volume = {185},
year = {2014}
}
@article{Matsumoto:00,
author = {Matsumoto, Makoto and Nishimura, Takuji},
file = {:data/LDRIVE/Shared/Marcelo/RNGs/A Nonempirical Test on the Weight of Pseudorandom Number Generators.pdf:pdf},
journal = {Monte Carlo and Quasi-Monte Carlo Methods},
mendeley-groups = {SensorNET-WS},
number = {Springer-Verlag},
pages = {381--395},
title = {{A Nonempirical Test on the Weight of Pseudorandom Number Generators}},
year = {2000}
}
@article{Matsumoto:06,
author = {Matsumoto, Makoto; and Saito, Mutsuo; and {Haramoto, Hiroshi; Nishmura}, Takuji},
journal = {Journal of Universal Computer Science},
keywords = {3 mathematics of computing,category,g,mer-,monte carlo methods,probability and statistics,pseudorandom number generation,random num-,random number generation,senne twister,simulation},
number = {6},
pages = {672--690},
title = {{Pseudorandom Number Generation: Impossibility and Compromise}},
volume = {12},
year = {2006}
}
@article{Matsumoto2003,
author = {Matsumoto, Makoto and Nishimura, Takuji},
doi = {10.1016/S0378-4754(02)00227-6},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/Sum-discrepancy test on pseudorandom number generators.pdf:pdf},
issn = {03784754},
journal = {Mathematics and Computers in Simulation},
keywords = {fourier transform,random number generation,statistical test},
mendeley-groups = {SensorNET-WS},
month = mar,
number = {3-6},
pages = {431--442},
title = {{Sum-discrepancy test on pseudorandom number generators}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0378475402002276},
volume = {62},
year = {2003}
}
@article{Fujimoto:90,
abstract = {Parallel discrete event simulation (PDES), sometimes called distributed simulation, refers to the execution of a single discrete event simulation program on a parallel computer. PDES has attracted a considerable amount of interest in recent years. From a pragmatic standpoint, this interest arises from the fact that large simulations in engineering, computer science, economics, and military applications, to mention a few, consume enormous amounts of time on sequential machines. From an academic point of view, parallel simulation is interesting because it represents a problem domain that often contains substantial amounts of parallelism (e.g., see [59]), yet paradoxically, is surprisingly difficult to parallelize in practice. A sufficiently general solution to the PDES problem may lead to new insights in parallel computation as a whole. Historically, the irregular, data-dependent nature of PDES programs has identified it as an application where vectorization techniques using supercomputer hardware provide little benefit [14].A discrete event simulation model assumes the system being simulated only changes state at discrete points in simulated time. The simulation model jumps from one state to another upon the occurrence of an event. For example, a simulator of a store-and-forward communication network might include state variables to indicate the length of message queues, the status of communication links (busy or idle), etc. Typical events might include arrival of a message at some node in the network, forwarding a message to another network node, component failures, etc.We are especially concerned with the simulation of asynchronous systems where events are not synchronized by a global clock, but rather, occur at irregular time intervals. For these systems, few simulator events occur at any single point in simulated time; therefore parallelization techniques based on lock-step execution using a global simulation clock perform poorly or require assumptions in the timing model that may compromise the fidelity of the simulation. Concurrent execution of events at different points in simulated time is required, but as we shall soon see, this introduces interesting synchronization problems that are at the heart of the PDES problem.This article deals with the execution of a simulation program on a parallel computer by decomposing the simulation application into a set of concurrently executing processes. For completeness, we conclude this section by mentioning other approaches to exploiting parallelism in simulation problems.Comfort and Shepard et al. have proposed using dedicated functional units to implement specific sequential simulation functions, (e.g., event list manipulation and random number generation [20, 23, 47]). This method can provide only a limited amount of speedup, however. Zhang, Zeigler, and Concepcion use the hierarchical decomposition of the simulation model to allow an event consisting of several subevents to be processed concurrently [21, 98]. A third alternative is to execute independent, sequential simulation programs on different processors [11, 39]. This replicated trials approach is useful if the simulation is largely stochastic and one is performing long simulation runs to reduce variance, or if one is attempting to simulate a specific simulation problem across a large number of different parameter settings. However, one drawback with this approach is that each processor must contain sufficient memory to hold the entire simulation. Furthermore, this approach is less suitable in a design environment where results of one experiment are used to determine the experiment that should be performed next because one must wait for a sequential execution to be completed before results are obtained.},
author = {Fujimoto, Richard M.},
doi = {10.1145/84537.84545},
file = {:C$\backslash$:/Users/marcelo\_queiroz/ownCloud/Shared/Marcelo/RNGs/01-parallel-discrete-event-simuIation.pdf:pdf},
journal = {Communications of the ACM - Special issue on simulation CACM},
mendeley-groups = {SensorNET-WS},
pages = {30--53},
title = {{Parallel discrete event simulation}},
url = {http://dl.acm.org/citation.cfm?id=84545},
year = {1990}
}
@misc{SIAM:14,
author = {SIAM},
mendeley-groups = {SensorNET-WS},
title = {{Graduate Education for Computational Science and Engineering Webpage}},
journal = {http://www.siam.org/students/resources/report.php},
url = {http://www.siam.org/students/resources/report.php},
year = {2014},
urldate = {11/2014}
}
@article{Neiswanger:14,
archivePrefix = {arXiv},
arxivId = {1311.4780v1},
author = {Neiswanger, Willie and Wang, Chong and Xing, Eric P},
eprint = {1311.4780v1},
file = {:data/LDRIVE/Shared/Marcelo/RNGs/Leo-Asymptotically Exact - Embarrassingly Parallel MCMC.pdf:pdf},
mendeley-groups = {SensorNET-WS},
title = {{Asymptotically Exact, Embarrassingly Parallel MCMC}},
url = {http://arxiv.org/pdf/1311.4780v1.pdf},
year = {2014}
}
@inproceedings{Steven:13,
title = {Bayes and Big Data:  The Consensus Monte Carlo Algorithm},
author  = {Steven L. Scott and Alexander W. Blocker and Fernando V. Bonassi},
year  = 2013,
booktitle = {Bayes 250}
}
@article{Fredricsson:75,
abstract = {The M-tuple weight distribution and high-order autocorrelations of binary m-sequences are related to the weight distribution of the shortened Hamming code, which is dual to the m-sequence code. It is shown that good weight distribution and correlation properties can be achieved simultaneously only if the m-sequence is sufficiently long.},
author = {Fredricsson, Staffan A.},
doi = {10.1109/TIT.1975.1055310},
journal = {IEEE Transactions on Information Theory},
keywords = {Ash,Autocorrelation,Decoding,Error correction codes,Information theory,Product codes,Reliability theory,Shift registers,Shift-register sequences,Testing,Welding},
pages = {115--120},
title = {{Pseudo-Randomness Properties of Binary Shift Register Sequences}},
url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=1055310},
volume = {I},
year = {1975}
}
@book{Knuth:98,
 author = {Knuth, Donald E.},
 title = {The Art of Computer Programming,  Volume 2: (2Nd Ed.) Seminumerical Algorithms},
 year = {1998},
 isbn = {0-201-89685-0},
 publisher = {Addison Wesley Longman Publishing Co., Inc.},
 address = {Redwood City, CA, USA}
}
@misc{Brown,
author = {Brown, Robert G.},
mendeley-groups = {SensorNET-WS},
title = {dieharder},
url = {http://www.phy.duke.edu/~rgb/General/dieharder.php},
urldate = {2014/11}
}
@misc{Apache:14,
author = {Apache Foundation, Inc.},
keywords = {apache hadoop,mapreduce},
mendeley-groups = {SensorNET-WS},
mendeley-tags = {apache hadoop,mapreduce},
title = {{Apache Hadoop Wiki}},
url = {http://wiki.apache.org/hadoop/},
urldate = {2014-11}
}
@article{Lammel:08,
author = {Ralf Lammel},
title = {Google?s MapReduce programming model - Revisited},
year = {2008},
journal = {Science of Computer Programming},
doi = {http://dx.doi.org/10.1016/j.scico.2007.07.001},
issn = {0167-6423},
volume = {70},
number = {1},
pages = {1--30},
url = {http://www.sciencedirect.com/science/article/pii/S0167642307001281},
}